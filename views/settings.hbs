<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="icon" href="https://raw.githubusercontent.com/shalvah/RemindMeOfThisTweet/master/assets/favicon.ico/favicon.ico" type="image/x-icon" />
    <link rel="icon" href="https://raw.githubusercontent.com/shalvah/RemindMeOfThisTweet/master/assets/favicon-32x32.png" type="image/png" />
    <link rel="icon" href="https://raw.githubusercontent.com/shalvah/RemindMeOfThisTweet/master/assets/favicon-16x16.png" type="image/png" />
    <link rel="apple-touch-icon-precomposed" sizes="180x180" href="https://raw.githubusercontent.com/shalvah/RemindMeOfThisTweet/master/assets/apple-touch-icon.png">

    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', Calibri, sans-serif;
            height: 100%;
            box-sizing: border-box;
            padding: 20px;
            display: flex;
            flex-direction: column;
            font-size: 1.2em;
            background-color: whitesmoke;
        }

        .content {
            flex-grow: 1;
        }

        footer {
            text-align: center;
        }

        a {
            text-decoration: none;
        }

        .emoji-flag-nigeria {
            display: inline-block;
            height: 1em;
            width: 1em;
            margin: 0 .05em 0 .1em;
            vertical-align: -0.1em;
            background-repeat: no-repeat;
            background-position: center center;
            background-size: 1em 1em;
            background-image: url("https://twemoji.maxcdn.com/v/latest/svg/1f1f3-1f1ec.svg")
        }

    </style>
    <title>Settings for {{ username }} on @RemindMe_OfThis</title>
</head>

<body>
<div class="content">
    <h2>Settings for {{ username }}</h2>
    <h4>Your timezone</h4>
    <form method="post" action="/_/updatesettings">
        <label>
            <div><small>Whenever you mention @RemindMe_OfThis with a time (for instance, "9:00pm"), we'll use this to
                know timezone you're in.</small></div>
            <select name="utcOffset">
                {{#each timezones as |timezone index| }}
                    <option value="{{ timezone.value }}"
                            {{#is timezone.value ../settings.utcOffset }}selected{{/is}}>{{ timezone.label }}</option>
                {{/each}}
            </select>
        </label>
        <button type="submit">
            Save
        </button>
    </form>

    <div>
        <h4>Push notifications</h4>
        <form id="notifications-form" method="post" action="/_/updatesettings">
            <input type="hidden" name="notifications.enabled"
                   value="{{#eq settings.notifications.enabled true }}1{{else}}0{{/eq}}">
            <input type="hidden" name="notifications.fbtoken" value="{{ settings.notifications.fbtoken }}">
            <div><small>@RemindMe_OfThis can send you push notifications via your browser, instead of on
                Twitter. This allows us to get past Twitter's Tweet limits, so you'll get your reminders on time.</small></div>
            <br>
            <b><small id="notifications-status"></small></b>
            <br>
            <br>
            <div id="notifications-buttons">
                <button id="enable-notifications-btn" onclick="event.preventDefault(); requestPermission(this)"
                        style="display: none;">
                    Enable notifications
                </button>
                <button id="switch-notifications-btn" onclick="event.preventDefault(); requestPermission(this)"
                        style="display: none;">
                    Switch notifications to this device
                </button>
                <button id="disable-notifications-btn" onclick="event.preventDefault(); disableNotifications(this)"
                        style="display: none;">
                    Disable all notifications
                </button>
            </div>
        </form>
        <br>
    </div>
</div>
<br>
<footer style="margin-bottom: 0; padding-bottom: 0">
    <!-- Thanks to Twemoji (and boo to Microsoft for not having flag emojis in Win10) -->
    <div style="color: cornflowerblue;">
        <small>
            Made in Lagos, Nigeria<i class="emoji-flag-nigeria"></i>
        </small>
    </div>

    <br>
    <div>
        <small>
            <a href="https://www.patreon.com/shalvah">Support @RemindMe_OfThis</a>
            &nbsp;|&nbsp;
            <a href="https://github.com/shalvah/RemindMeOfThisTweet">Check out the source code</a>
        </small>
    </div>
</footer>

<script>
    function setNotificationStatus() {
        /**
         * @type \{{enabled: boolean, fbtoken: string|null}}
         */
        window.notificationSettings = {{{JSONstringify settings.notifications }}};
        if (notificationSettings.enabled === false) {
            document.querySelector('#notifications-status').textContent = "Off";
            document.querySelector('#enable-notifications-btn').style.display = "block";
        } else {
            document.querySelector('#notifications-status').textContent = "On ✅";
            document.querySelector('#disable-notifications-btn').style.display = "block";
        }
    }
</script>

<script>
    setNotificationStatus();
</script>

<script src="https://www.gstatic.com/firebasejs/6.6.1/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/6.6.1/firebase-messaging.js"></script>

<script>
    const OSes = {
        macOS: 'macOS',
        windows: "Windows",
        linux: "Linux",
        android: "Android",
        iOS: "iOS",
        unknown: null,
    };

    function getOS() {
        const userAgent = window.navigator.userAgent;
        const platform = window.navigator.platform;
        const macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'];
        const windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'];
        const iosPlatforms = ['iPhone', 'iPad', 'iPod'];
        let os = OSes.unknown;

        if (macosPlatforms.indexOf(platform) !== -1) {
            os = OSes.macOS;
        } else if (iosPlatforms.indexOf(platform) !== -1) {
            os = OSes.iOS;
        } else if (windowsPlatforms.indexOf(platform) !== -1) {
            os = OSes.windows;
        } else if (/Android/.test(userAgent)) {
            os = OSes.android;
        } else if (/Linux/.test(platform)) {
            os = OSes.linux;
        }

        return os;
    }

    const browsers = {
        opera: "Opera",
        IE: "IE",
        chrome: "Chrome",
        safari: "Safari",
        firefox: "Firefox",
        unknown: null,
    };

    function getBrowser() {
        var userAgent = navigator.userAgent;
        var browserName = browsers.unknown;

        if (userAgent.includes("Opera")) {
            browserName = browsers.opera;
        } else if (userAgent.includes("MSIE")) {
            browserName = browsers.IE;
        } else if (userAgent.includes("Chrome")) {
            browserName = browsers.chrome;
        } else if (userAgent.includes("Safari")) {
            browserName = browsers.safari;
        } else if (userAgent.includes("Firefox")) {
            browserName = browsers.firefox;
        }

        return browserName;
    }
</script>

<script>
    function initializeAndConfigurePushNotifications() {

        function notificationsNotSupported() {
            document.querySelector("#notifications-buttons").innerHTML = "Not available on this device";
        }

        if (!("serviceWorker" in navigator)) {
            console.log("Service workers not supported.");
            notificationsNotSupported();
            return;
        }

        const os = getOS();
        if ([OSes.iOS, OSes.unknown].includes(os)) {
            console.log("Not supported on " + os);
            notificationsNotSupported();
            return;
        }

        const browser = getBrowser();
        if ([browsers.safari, browsers.IE, browsers.unknown].includes(browser)) {
            console.log("Not supported on " + browser);
            document.querySelector("#notifications-buttons").innerHTML = "Not available on this device";
            return;
        }

        initializeFirebase();

        initializeNotificationsUI();

        setTokenRefreshHandler();

        setNewMessageHandler();

    }

    function initializeFirebase() {
        const firebaseConfig = {
            apiKey: "AIzaSyB6sEFuSmpYOvSa6ZHNqKmG2-0ML26b1EY",
            authDomain: "remindmeofthistweet.firebaseapp.com",
            projectId: "remindmeofthistweet",
            messagingSenderId: "183640492360",
            appId: "1:183640492360:web:a4206135929aca46e0cb7d"
        };
        firebase.initializeApp(firebaseConfig);
        window.messaging = firebase.messaging();
        messaging.usePublicVapidKey("BJMYCskhhbaLOLCp7loU00SJrVCpMo--_nTqIpb0jRa5_43Z_F-BnsNy-D4uzcO8mP9om432XvALhpKx3_p808w");

        navigator.serviceWorker.register('/firebase-messaging-sw.js')
                .then(reg => console.log('Registered SW successfully', reg))
                .catch(err => console.log('Failed to register SW', err))
    }

    function setTokenRefreshHandler() {
        messaging.onTokenRefresh(() => {
            messaging.getToken()
                    .then((refreshedToken) => {
                        console.log('Token refreshed.');
                        submitNotificationUpdateForm(['notifications.fbtoken', refreshedToken]);
                    })
                    .catch((err) => {
                        console.log('Unable to retrieve refreshed token ', err);
                    });
        });
    }

    function setNewMessageHandler() {
        messaging.onMessage((payload) => {
            console.log('Message received. ', payload);
            if (Notification.permission == 'granted') {
                navigator.serviceWorker.getRegistration().then((reg) => {
                    reg.showNotification(payload.data.title,
                            {body: payload.data.body, data: {url: payload.data.url}});
                });
            } else {
                console.log("No notification permission")
            }
        });
    }

    function initializeNotificationsUI() {
        messaging.getToken().then((currentToken) => {
            console.log({currentToken});
            if (currentToken) {
                if (notificationSettings.enabled) {
                    if (notificationSettings.fbtoken === currentToken) {
                        // Enabld on this device
                        document.querySelector('#notifications-status').textContent = "On ✅";
                    } else {
                        // Enabled on a different device
                        document.querySelector('#notifications-status').textContent = "Enabled on a different device 👍";
                        document.querySelector('#switch-notifications-btn').style.display = "block";
                    }
                }
            } else {
                console.log('No Instance ID token available.');
            }
        }).catch((err) => {
            console.log('An error occurred while retrieving token. ', err);
        });
    }

    function requestPermission(button) {
        Notification.requestPermission()
                .then((permission) => {
                    if (permission === 'granted') {
                        console.log('Notification permission granted.');
                        button.disabled = true;
                        button.textContent = "Loading...";

                        messaging.getToken().then((currentToken) => {
                            console.log({currentToken});
                            if (currentToken) {
                                submitNotificationUpdateForm(['notifications.enabled', 1], ['notifications.fbtoken', currentToken]);
                            } else {
                                console.log('No Instance ID token available.');
                            }
                        }).catch((err) => {
                            console.log('An error occurred while retrieving token. ', err);
                        });
                    } else {
                        console.log('Unable to get permission to notify.');
                    }
                });
    }

    function disableNotifications(button) {
        button.disabled = true;
        button.textContent = "Loading...";
        submitNotificationUpdateForm(['notifications.enabled', 0]);
    }

    function submitNotificationUpdateForm(...formValues) {
        formValues.forEach(([name, value]) => {
            document.querySelector(`input[name='${name}']`).value = value;
        });
        const form = document.querySelector('#notifications-form');
        form.submit();
    }
</script>

<script>
    initializeAndConfigurePushNotifications();
</script>

</body>